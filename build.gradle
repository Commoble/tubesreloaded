plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'net.neoforged.gradle.userdev' version "7.0.+"
}

group = "net.commoble.${modid}"
base { archivesName="${modid}-${mc_version}" }
version = "${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// the jarjar stuff
jarJar.enable()
tasks.jarJar.configure {
	archiveClassifier = '' // we only publish one jar so we make jarjar 
}

tasks.build.dependsOn tasks.jarJar

sourceSets
{
	main
	test
	datagen
	generated
	gametest
}

// include resources generated from datagen in main
sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
  accessTransformers {
    file('src/main/resources/META-INF/accesstransformer.cfg')
  }
}

runs {
	configureEach {
		systemProperty 'forge.logging.console.level', 'debug'
		modSources.addAll project.sourceSets.main
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}
	
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}

	data {
		programArguments.addAll '--mod', project.modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		modSources.addAll project.sourceSets.datagen
	}
}

repositories {
	maven { url "https://commoble.net/maven/" }
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
    
	implementation "net.commoble.databuddy:databuddy-${databuddy_mc_version}:${databuddy_version}"
	jarJar(group: "net.commoble.databuddy", name: "databuddy-${databuddy_mc_version}", version: "[${databuddy_version}, ${databuddy_next_version})")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	archiveClassifier = 'slim'
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
